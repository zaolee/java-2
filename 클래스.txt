1. 클래스 선언

public class Car{ *클래스는대문자
 // 클래스의 구성 멤버
 // 1.1 멤버변수(필드) -> 인스턴스(객체) 필드가 됨.
 String company; *필드는 소문자로
 String model;
 String color; *기본값 : null
 (defailt) int maxSpeed; *기본형: int, 기본값: 0
 boolean isRun *기본값 : false

 // 1.2 생성자 
 // 1.3 메소드 -> 인스턴스 메소드
 void setMaxSpeed(int maxSpeed){ // setter
 this.maxSpeed = maxSpeed; 
 }
 public int getMaxSpeed(){ // getter
 return this.maxSpeed;
 }
}

2. 객체생성
new 클래스();

Car car1 = new Car();
car1.setMaxspeed(3) // setter
Car.maxSpeed = 4; // 인스턴스 필드에 직접 값을 할당 
-> 이거 잘 안써 왜? 지금은 디폴트지만, 다른 패키지에서 이걸 쓸경우 프라이빗으로 해놓고 게터세터 사용

 // car1 앞엔 변수 타입을 지정해줘야되서 Car타입의 class가 들어가야된다.
 // Car객체를 선언해서 Car class타입의 변수 car를 생성한다.
 // 즉, new연산자로 클래스 생성자를 호출하여 객체를 만든다.

[변수의 자료형(type)]
2.1 기본형: 정수형(byte, short, char, long), 실수형(float, double), 논리형(boolean)
 
2.2 참조형: class, 배열, 인터페이스, 열거
* 인스턴스 생성시 변수는 스택에 생성되고 new class는 힙에 생성
* 해당 변수는 관련 주소값이 있는거라 주소를 통해 참조하는것

기본형과 참조형의 차이는?
변수 = 메모리 공간, 즉 메모리 공간의 차이
기본형: 스택(Stack) 영역에 생성
참조형: 힙(Heap) 영역에 생성  

3. 필드
3.1 필드 사용
객체 내부(같은 클래스): "필드이름"으로 바로 접근
public class Car{
 // 필드: 객체의 속성값을 저장하기 위함
 int speed

 // 생성자: 객체를 생성하고 필드를 초기화 하기 위함
 접근제한자 생성자(클래스명이랑 동일해야됨)
 public Car(){ // 기본생성자(매개변수 없음) 이거 자동으로 컴파일러가 만들어줌
 // 실행문; 필드를 초기화
 speed = 1;
}
 public Car(int speed){ // 생성자 오버로딩(이름은 같지만 매개변수 타입, 기능등으로 다르게 사용)  !=오버라이딩(재정의)
 this.speed = speed;
 }

 // 메소드: 객체의 특정 기능을 구현하기 위함 
 반환값(return_type) 메소드명(매개변수){
 // 실행문;
 void method1() *반환값이 없으면 void
  speed = 0; 
 }

}
*메소드와의 차이 : 
3.2 생성자는 return값이 없지만 메소드는 return값이 있다. 
3.3 이름, 생성자는 대문자로 시작(클래스 이름이랑 동일하니께), 메서드는 소문자로

객체 외부: "객체변수.필드명" 으로 접근
piblic class Person{
 // 필드
 // 생성자
 // 메소드
 void method2(){ // 이거 실행하고 싶으면 main메소드에서 호출해서 실행하기, 선언 != 실행
 // car객체 생성 후 new연산자 사용
 Car myCar = new Car(); *Car 클래스에 있는걸 사용하고 싶을때, myCar은 현재 Car의 주소값을 가르키고 있음
 myCar.speed = 60 *Car클래스 안에 있는 기능을 사용하고 싶어도 Car 객체 생성 후 사용;
 }
}

4. 생성자 - 객체를 생성하고 필드를 초기화함.
[꿀팁] this, this(), super, super()
this: 해당 객체를 가리킴
this(): 해당 클래스의 생성자
super: 부모객체
super(): 부모 생성자

5. 메소드

6. 접근제한자
종류		같은 클래스	같은패키지	자식클래스	다른패키지
private		O		X		X		X
defalut(생략)	O		O		X(O)		X
protected		O		O		O		X(O)
public		O		O		O		O
* ()는 상속관계인 경우






























